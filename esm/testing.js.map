{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser-dynamic/testing.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,cAAc,EAAE,iBAAiB,EAAE,YAAY,EAAC,MAAM,mBAAmB;OAC1E,EAAC,qBAAqB,EAAE,gBAAgB,EAAE,8BAA8B,EAAC,MAAM,2BAA2B;OAC1G,EAAC,SAAS,EAAE,QAAQ,EAAY,kBAAkB,EAAO,MAAM,eAAe;OAC9E,EAAC,oBAAoB,EAAE,qBAAqB,EAAC,MAAM,uBAAuB;OAC1E,EAAC,iBAAiB,EAAE,mBAAmB,EAAC,MAAM,mCAAmC;OAEjF,EAAC,8BAA8B,EAAC,MAAM,SAAS;OAC/C,EAAC,wBAAwB,EAAC,MAAM,uCAAuC;AAE9E,cAAc,0BAA0B,CAAA;AAExC,MAAM,uCAAuC,GAA2C;IACtF,8BAA8B;IAC9B;QACE,EAAE,OAAO,EAAE,iBAAiB;YAC1B,QAAQ,EAAE,qBAAqB,EAAE;QACnC,EAAE,OAAO,EAAE,YAAY;YACrB,QAAQ,EAAE,gBAAgB,EAAE;KAC/B;CACF,CAAC;AAEF;;;;GAIG;AACH,oCACI,EAAC,SAAS,GAAG,EAAE,EAAE,MAAM,GAAG,IAAI,EAAC,GACuB,EAAE;IAC1D,MAAM,QAAQ,GAAG,kBAAkB,CAAC,gBAAgB,CAAC;QACnD,uCAAuC;QACvC,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,IAAI,cAAc,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,EAAC;QAC7F,SAAS,GAAG,SAAS,GAAG,EAAE;KAC3B,CAAC,CAAC;IACH,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAChC,CAAC;AAED;;;;GAIG;AACH,OAAO,MAAM,0BAA0B,GAAG,mBAAmB,CAAC;AAC9D;AAWA,CAAC;AAVD,kBAAkB;AACX,mCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,OAAO,EAAE,CAAC,iBAAiB,CAAC;gBAC5B,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,8BAA8B,EAAC;oBACzE,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,wBAAwB,EAAC;iBACrE;aACF,EAAG,EAAE;CACL,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig, DirectiveResolver, ViewResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockViewResolver, OverridingTestComponentBuilder} from '@angular/compiler/testing';\nimport {AppModule, Compiler, Provider, ReflectiveInjector, Type} from '@angular/core';\nimport {TestComponentBuilder, TestComponentRenderer} from '@angular/core/testing';\nimport {BrowserTestModule, browserTestPlatform} from '@angular/platform-browser/testing';\n\nimport {BROWSER_APP_COMPILER_PROVIDERS} from './index';\nimport {DOMTestComponentRenderer} from './testing/dom_test_component_renderer';\n\nexport * from './private_export_testing'\n\nconst TEST_BROWSER_DYNAMIC_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  BROWSER_APP_COMPILER_PROVIDERS,\n  [\n    { provide: DirectiveResolver,\n      useClass: MockDirectiveResolver },\n    { provide: ViewResolver,\n      useClass: MockViewResolver }\n  ]\n];\n\n/**\n * Creates a compiler for testing\n *\n * @stable\n */\nexport function browserTestCompiler(\n    {providers = [], useJit = true}: {providers?: Array<Type|Provider|any[]>,\n                                      useJit?: boolean} = {}): Compiler {\n  const injector = ReflectiveInjector.resolveAndCreate([\n    TEST_BROWSER_DYNAMIC_COMPILER_PROVIDERS,\n    {provide: CompilerConfig, useValue: new CompilerConfig({genDebugInfo: true, useJit: useJit})},\n    providers ? providers : []\n  ]);\n  return injector.get(Compiler);\n}\n\n/**\n * Platform for testing.\n *\n * @experimental API related to bootstrapping are still under review.\n */\nexport const browserDynamicTestPlatform = browserTestPlatform;\nexport class BrowserDynamicTestModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: AppModule, args: [{\n  modules: [BrowserTestModule],\n  providers: [\n    {provide: TestComponentBuilder, useClass: OverridingTestComponentBuilder},\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n}, ] },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}