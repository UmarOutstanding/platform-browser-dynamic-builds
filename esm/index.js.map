{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser-dynamic/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,GAAG,EAAE,6CAA6C,EAAE,mBAAmB,EAAC,MAAM,mBAAmB;OAClG,EAAC,cAAc,EAAE,gBAAgB,EAAE,sBAAsB,EAAkD,QAAQ,EAA+B,qBAAqB,EAAC,MAAM,eAAe;OAC7L,EAAC,aAAa,EAAE,aAAa,EAAmB,gBAAgB,EAAC,MAAM,2BAA2B;OAElG,EAAC,OAAO,EAAC,MAAM,gBAAgB;OAC/B,EAAC,2CAA2C,EAAC,MAAM,0BAA0B;OAC7E,EAAC,SAAS,EAAC,MAAM,qBAAqB;OACtC,EAAC,OAAO,EAAC,MAAM,oBAAoB;AAI1C;;GAEG;AACH,OAAO,MAAM,wBAAwB,GAAe,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAC,CAAC,CAAC;AAE1F;;GAEG;AACH,OAAO,MAAM,sBAAsB,GAAG,qBAAqB,CACvD,mBAAmB,EAAE,gBAAgB,EAAE,2CAA2C,CAAC,CAAC;AAExF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AACH,8EAA8E;AAC9E,0BACI,gBAAyB,EAAE,eAA4B;IACzD,IAAI,eAAgC,CAAC;IACrC,IAAI,YAAY,GAAU,EAAE,CAAC;IAC7B,IAAI,eAAe,GAAU,EAAE,CAAC;IAChC,IAAI,mBAAmB,GAAa,EAAE,CAAC;IACvC,MAAM,uBAAuB,GAAG,6CAA6C,CAAC,eAAe,CAAC,CAAC;IAC/F,YAAY,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC/E,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC;IAC1D,mBAAmB,GAAG,uBAAuB,CAAC,mBAAmB,CAAC;IAClE;IAYF,CAAC;IAXC,kBAAkB;IACb,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;oBACrB,SAAS,EAAE,eAAe;oBAC1B,YAAY,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,CAAC;oBACrD,OAAO,EAAE,CAAC,aAAa,CAAC;oBACxB,eAAe,EAAE,eAAe;oBAChC,SAAS,EAAE,CAAC,gBAAgB,CAAC;oBAC7B,OAAO,EAAE,CAAC,sBAAsB,CAAC;iBAClC,EAAG,EAAE;KACP,CACA;IAEC,MAAM,CAAC,sBAAsB,EAAE;SAC1B,eAAe,CAAC,aAAa,EAAE,eAAe,CAAC;SAC/C,IAAI,CAAC,CAAC,SAAS;QACd,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAChD,mBAAmB,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACxD,MAAM,MAAM,GAAmB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACT,CAAC;AAED;;;;GAIG;AACH,kCACI,eAAuB,EAAE,eAAe,GAAe,EAAE;IAC3D,kDAAkD;IAClD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAE,CAAC;YACA,OAAO,EAAE,aAAa;YACtB,QAAQ,EAAE,eAAe;SAC1B,CAAgB;SACZ,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC;AAED;;GAEG;AACH,OAAO,MAAM,wBAAwB,GACjC,qBAAqB,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,CAAC;QACxC,OAAO,EAAE,gBAAgB;QACzB,QAAQ,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAC,CAAC,EAAC;QAC1D,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC,CAAC;AAE9B,wBAAwB,GAAU;IAChC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;AACxB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XHR, analyzeAppProvidersForDeprecatedConfiguration, platformCoreDynamic} from '@angular/compiler';\nimport {ApplicationRef, COMPILER_OPTIONS, CUSTOM_ELEMENTS_SCHEMA, CompilerFactory, CompilerOptions, ComponentRef, NgModule, PlatformRef, Provider, Type, createPlatformFactory} from '@angular/core';\nimport {BrowserModule, WORKER_SCRIPT, WorkerAppModule, platformWorkerUi} from '@angular/platform-browser';\n\nimport {Console} from './core_private';\nimport {INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from './src/platform_providers';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {XHRImpl} from './src/xhr/xhr_impl';\n\n\n\n/**\n * @experimental\n */\nexport const CACHED_TEMPLATE_PROVIDER: Provider[] = [{provide: XHR, useClass: CachedXHR}];\n\n/**\n * @experimental API related to bootstrapping are still under review.\n */\nexport const platformBrowserDynamic = createPlatformFactory(\n    platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API (version 1)\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * ## API (version 2)\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `providers`, `declarations`, `imports`, `entryComponents`: Defines the properties\n *   of the dynamically created module that is used to bootstrap the module.\n * - to configure the compiler, use the `compilerOptions` parameter.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n *\n * @deprecated This api cannot be used with the offline compiler. Use\n * `PlatformRef.boostrapModule()` instead.\n */\n// Note: We are using typescript overloads here to have 2 function signatures!\nexport function bootstrap<C>(\n    appComponentType: Type<C>, customProviders?: Provider[]): Promise<ComponentRef<C>> {\n  let compilerOptions: CompilerOptions;\n  let declarations: any[] = [];\n  let entryComponents: any[] = [];\n  let deprecationMessages: string[] = [];\n  const deprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration(customProviders);\n  declarations = deprecatedConfiguration.moduleDeclarations.concat(declarations);\n  compilerOptions = deprecatedConfiguration.compilerOptions;\n  deprecationMessages = deprecatedConfiguration.deprecationMessages;\n  class DynamicModule {\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    providers: customProviders,\n    declarations: declarations.concat([appComponentType]),\n    imports: [BrowserModule],\n    entryComponents: entryComponents,\n    bootstrap: [appComponentType],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n  }, ] },\n];\n}\n\n  return platformBrowserDynamic()\n      .bootstrapModule(DynamicModule, compilerOptions)\n      .then((moduleRef) => {\n        const console = moduleRef.injector.get(Console);\n        deprecationMessages.forEach((msg) => console.warn(msg));\n        const appRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n        return appRef.components[0];\n      });\n}\n\n/**\n * Bootstraps the worker ui.\n *\n * @experimental\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string, customProviders: Provider[] = []): Promise<PlatformRef> {\n  // For now, just creates the worker ui platform...\n  return Promise.resolve(platformWorkerUi(([{\n                                            provide: WORKER_SCRIPT,\n                                            useValue: workerScriptUri,\n                                          }] as Provider[])\n                                              .concat(customProviders)));\n}\n\n/**\n * @experimental API related to bootstrapping are still under review.\n */\nexport const platformWorkerAppDynamic =\n    createPlatformFactory(platformCoreDynamic, 'workerAppDynamic', [{\n                            provide: COMPILER_OPTIONS,\n                            useValue: {providers: [{provide: XHR, useClass: XHRImpl}]},\n                            multi: true\n                          }]);\n\nfunction normalizeArray(arr: any[]): any[] {\n  return arr ? arr : [];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}