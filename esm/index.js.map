{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser-dynamic/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMMON_DIRECTIVES, COMMON_PIPES} from '@angular/common';\nimport {COMPILER_PROVIDERS, CompilerConfig, XHR} from '@angular/compiler';\nimport {AppModule, AppModuleRef, ApplicationRef, Compiler, ComponentRef, ComponentResolver, ExceptionHandler, PLATFORM_DIRECTIVES, PLATFORM_PIPES, ReflectiveInjector, Type, coreLoadAndBootstrap, isDevMode} from '@angular/core';\nimport {BROWSER_APP_PROVIDERS, BrowserModule, WORKER_APP_APPLICATION_PROVIDERS, WORKER_SCRIPT, WORKER_UI_APPLICATION_PROVIDERS, bootstrapModuleFactory, browserPlatform, workerAppPlatform, workerUiPlatform} from '@angular/platform-browser';\n\nimport {Console, ReflectionCapabilities, reflector} from './core_private';\nimport {getDOM, initDomAdapter} from './platform_browser_private';\nimport {PromiseWrapper} from './src/facade/async';\nimport {ConcreteType, isPresent, stringify} from './src/facade/lang';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {XHRImpl} from './src/xhr/xhr_impl';\n\n\n\n/**\n * @experimental\n */\nexport const BROWSER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\n/**\n * @experimental\n */\nexport const CACHED_TEMPLATE_PROVIDER: Array<any /*Type | Provider | any[]*/> =\n    [{provide: XHR, useClass: CachedXHR}];\n\nfunction _initGlobals() {\n  initDomAdapter();\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n}\n\n/**\n * Creates the runtime compiler for the browser.\n *\n * @stable\n */\nexport function browserCompiler({useDebug, useJit = true, providers = []}: {\n  useDebug?: boolean,\n  useJit?: boolean,\n  providers?: Array<any /*Type | Provider | any[]*/>\n} = {}): Compiler {\n  _initGlobals();\n  if (useDebug === undefined) {\n    useDebug = isDevMode();\n  }\n  const injector = ReflectiveInjector.resolveAndCreate([\n    COMPILER_PROVIDERS, {\n      provide: CompilerConfig,\n      useValue: new CompilerConfig({genDebugInfo: useDebug, useJit: useJit})\n    },\n    {provide: XHR, useClass: XHRImpl}, providers ? providers : []\n  ]);\n  return injector.get(Compiler);\n}\n\n/**\n * Creates an instance of an `@AppModule` for the browser platform.\n *\n * ## Simple Example\n *\n * ```typescript\n * @AppModule({\n *   modules: [BrowserModule]\n * })\n * class MyModule {}\n *\n * let moduleRef = bootstrapModule(MyModule);\n * ```\n * @stable\n */\nexport function bootstrapModule<M>(\n    moduleType: ConcreteType<M>, compiler: Compiler = browserCompiler()): Promise<AppModuleRef<M>> {\n  return compiler.compileAppModuleAsync(moduleType).then(bootstrapModuleFactory);\n}\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API (version 1)\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * ## API (version 2)\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `providers`, `directives`, `pipes`, `modules`, `precompile`: Defines the properties\n *   of the dynamically created module that is used to bootstrap the module.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n *\n * @experimental This api cannot be used with the offline compiler and thus is still subject to\n * change.\n */\n// Note: We are using typescript overloads here to have 2 function signatures!\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<C>>;\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    {providers, directives, pipes, modules, precompile, compiler}?: {\n      providers?: Array<any /*Type | Provider | any[]*/>,\n      directives?: any[],\n      pipes?: any[],\n      modules?: any[],\n      precompile?: any[],\n      compiler?: Compiler\n    }): Promise<ComponentRef<C>>;\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    customProvidersOrDynamicModule?: Array<any /*Type | Provider | any[]*/>| {\n      providers: Array<any /*Type | Provider | any[]*/>,\n      directives: any[],\n      pipes: any[],\n      modules: any[],\n      precompile: any[],\n      compiler: Compiler\n    }): Promise<ComponentRef<C>> {\n  _initGlobals();\n  let compiler: Compiler;\n  let compilerProviders: any = [];\n  let providers: any[] = [];\n  let directives: any[] = [];\n  let pipes: any[] = [];\n  let modules: any[] = [];\n  let precompile: any[] = [];\n  if (customProvidersOrDynamicModule instanceof Array) {\n    providers = customProvidersOrDynamicModule;\n  } else if (customProvidersOrDynamicModule) {\n    providers = normalizeArray(customProvidersOrDynamicModule.providers);\n    directives = normalizeArray(customProvidersOrDynamicModule.directives);\n    pipes = normalizeArray(customProvidersOrDynamicModule.pipes);\n    modules = normalizeArray(customProvidersOrDynamicModule.modules);\n    precompile = normalizeArray(customProvidersOrDynamicModule.precompile);\n    compiler = customProvidersOrDynamicModule.compiler;\n  }\n  const deprecationMessages: string[] = [];\n  if (providers && providers.length > 0) {\n    // Note: This is a hack to still support the old way\n    // of configuring platform directives / pipes and the compiler xhr.\n    // This will soon be deprecated!\n    const inj = ReflectiveInjector.resolveAndCreate(providers);\n    const compilerConfig: CompilerConfig = inj.get(CompilerConfig, null);\n    if (compilerConfig) {\n      // Note: forms read the platform directives / pipes, modify them\n      // and provide a CompilerConfig out of it\n      directives = directives.concat(compilerConfig.platformDirectives);\n      pipes = pipes.concat(compilerConfig.platformPipes);\n      deprecationMessages.push(\n          `Passing a CompilerConfig to \"bootstrap()\" as provider is deprecated. Pass the provider to \"createCompiler()\" and call \"bootstrap()\" with the created compiler instead.`);\n    } else {\n      // If nobody provided a CompilerConfig, use the\n      // PLATFORM_DIRECTIVES / PLATFORM_PIPES values directly.\n      const platformDirectives = inj.get(PLATFORM_DIRECTIVES, []);\n      if (platformDirectives.length > 0) {\n        deprecationMessages.push(\n            `Passing PLATFORM_DIRECTIVES to \"bootstrap()\" as provider is deprecated. Use the new parameter \"directives\" of \"bootstrap()\" instead.`);\n      }\n      directives = directives.concat(platformDirectives);\n      const platformPipes = inj.get(PLATFORM_PIPES, []);\n      if (platformPipes.length > 0) {\n        deprecationMessages.push(\n            `Passing PLATFORM_PIPES to \"bootstrap()\" as provider is deprecated. Use the new parameter \"pipes\" of \"bootstrap()\" instead.`);\n      }\n      pipes = pipes.concat(platformPipes);\n    }\n    const xhr = inj.get(XHR, null);\n    if (xhr) {\n      compilerProviders.push([{provide: XHR, useValue: xhr}]);\n      deprecationMessages.push(\n          `Passing an instance of XHR to \"bootstrap()\" as provider is deprecated. Pass the provider to \"createCompiler()\" and call \"bootstrap()\" with the created compiler instead.`);\n    }\n    // Need to copy console from providers to compiler\n    // as well so that we can test the above deprecation messages!\n    const console = inj.get(Console, null);\n    if (console) {\n      compilerProviders.push([{provide: Console, useValue: console}]);\n    }\n  }\n  if (!compiler) {\n    compiler = browserCompiler({providers: compilerProviders});\n  }\n  const console: Console = compiler.injector.get(Console);\n  deprecationMessages.forEach((msg) => { console.warn(msg); });\n  class DynamicModule {\n    constructor(public appRef: ApplicationRef) {}\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: AppModule, args: [{\n    providers: providers,\n    modules: modules.concat([BrowserModule]),\n    directives: directives,\n    pipes: pipes,\n    precompile: precompile.concat([appComponentType])\n  }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ApplicationRef, },\n];\n}\n\n  return bootstrapModule(DynamicModule, compiler)\n      .then(\n          (moduleRef) => moduleRef.instance.appRef.waitForAsyncInitializers().then(\n              () => moduleRef.instance.appRef.bootstrap(appComponentType)));\n}\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_UI_APPLICATION_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS,\n        {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerUiPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\n\n/**\n * @experimental\n */\nconst WORKER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerApp(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  var appInjector = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_APP_APPLICATION_PROVIDERS, WORKER_APP_COMPILER_PROVIDERS,\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerAppPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\nfunction normalizeArray(arr: any[]): any[] {\n  return arr ? arr : [];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}