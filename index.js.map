{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../modules/@angular/platform-browser-dynamic/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,uBAA8C,iBAAiB,CAAC,CAAA;AAChE,yBAAiF,mBAAmB,CAAC,CAAA;AACrG,qBAAkZ,eAAe,CAAC,CAAA;AACla,iCAAuN,2BAA2B,CAAC,CAAA;AAEnP,6BAAyD,gBAAgB,CAAC,CAAA;AAE1E,sBAA6B,oBAAoB,CAAC,CAAA;AAClD,qBAAiD,mBAAmB,CAAC,CAAA;AACrE,0BAAwB,qBAAqB,CAAC,CAAA;AAC9C,yBAAsB,oBAAoB,CAAC,CAAA;AAE3C;;GAEG;AACU,sCAA8B,GAA2C;IACpF,6BAAkB,EAAE;QAClB,OAAO,EAAE,yBAAc;QACvB,UAAU,EAAE,UAAC,kBAAyB,EAAE,aAAoB;YAC1D,MAAM,CAAC,IAAI,yBAAc,CAAC,EAAC,oBAAA,kBAAkB,EAAE,eAAA,aAAa,EAAC,CAAC,CAAC;QACjE,CAAC;QACD,IAAI,EAAE,CAAC,0BAAmB,EAAE,qBAAc,CAAC;KAC5C;IACD,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,kBAAO,EAAC;IACjC,EAAC,OAAO,EAAE,0BAAmB,EAAE,QAAQ,EAAE,0BAAiB,EAAE,KAAK,EAAE,IAAI,EAAC;IACxE,EAAC,OAAO,EAAE,qBAAc,EAAE,QAAQ,EAAE,qBAAY,EAAE,KAAK,EAAE,IAAI,EAAC;CAC/D,CAAC;AAEF;;GAEG;AACU,gCAAwB,GACjC,CAAC,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,qBAAS,EAAC,CAAC,CAAC;AAE1C;IACE,wBAAS,CAAC,sBAAsB,GAAG,IAAI,qCAAsB,EAAE,CAAC;AAClE,CAAC;AAED;;;;GAIG;AACU,wCAAgC,GACzC,mCAAwB,CAAC,YAAY,CAAC,EAAC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,kBAAO,EAAC,CAAC,EAAC,CAAC,CAAC;AAE5F;;;;GAIG;AACU,0CAAkC,GAA2C;IACxF,6CAA0B;IAC1B,EAAC,OAAO,EAAE,sBAAe,EAAE,QAAQ,EAAE,wCAAgC,EAAC;IACtE,EAAC,OAAO,EAAE,2BAAoB,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,EAAC;CACtE,CAAC;AAEF;;GAEG;AACU,8BAAsB,GAC/B,4BAAqB,CAAC,gBAAgB,EAAE,0CAAkC,CAAC,CAAC;AA6FhF,mBACI,gBAAiC,EACjC,8BAOC;IACH,IAAI,eAAgC,CAAC;IACrC,IAAI,iBAAiB,GAAQ,EAAE,CAAC;IAChC,IAAI,SAAS,GAAU,EAAE,CAAC;IAC1B,IAAI,UAAU,GAAU,EAAE,CAAC;IAC3B,IAAI,KAAK,GAAU,EAAE,CAAC;IACtB,IAAI,OAAO,GAAU,EAAE,CAAC;IACxB,IAAI,UAAU,GAAU,EAAE,CAAC;IAC3B,EAAE,CAAC,CAAC,8BAA8B,YAAY,KAAK,CAAC,CAAC,CAAC;QACpD,SAAS,GAAG,8BAA8B,CAAC;IAC7C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC1C,SAAS,GAAG,cAAc,CAAC,8BAA8B,CAAC,SAAS,CAAC,CAAC;QACrE,UAAU,GAAG,cAAc,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC;QACvE,KAAK,GAAG,cAAc,CAAC,8BAA8B,CAAC,KAAK,CAAC,CAAC;QAC7D,OAAO,GAAG,cAAc,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;QACjE,UAAU,GAAG,cAAc,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC;QACvE,eAAe,GAAG,8BAA8B,CAAC,eAAe,CAAC;IACnE,CAAC;IACD;QAAA;QAWF,CAAC;QAVC,kBAAkB;QACb,wBAAU,GAA0B;YAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;wBACtB,SAAS,EAAE,SAAS;wBACpB,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,gCAAa,CAAC,CAAC;wBACxC,UAAU,EAAE,UAAU;wBACtB,KAAK,EAAE,KAAK;wBACZ,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,CAAC;qBAClD,EAAG,EAAE;SACP,CAAC;QACF,oBAAC;IAAD,CAAC,AAXC,IAWD;IAEC,MAAM,CAAC,sBAAe,CACX,aAAa,EAAE,8BAAsB,EAAE,EACvC,sBAAe,CAAC,YAAY,CAAC,eAAe,EAAE,EAAC,sBAAsB,EAAE,SAAS,EAAC,CAAC,CAAC;SACzF,IAAI,CAAC,UAAC,SAAS;QACd,IAAM,MAAM,GAAmB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAc,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACT,CAAC;AA/Ce,iBAAS,YA+CxB,CAAA;AAED;;GAEG;AACH,2BACI,eAAuB,EACvB,eAAwD;IAC1D,IAAI,GAAG,GAAG,yBAAkB,CAAC,gBAAgB,CACzC;QACE,kDAA+B,EAAE,sCAA8B;QAC/D,EAAC,OAAO,EAAE,gCAAa,EAAE,QAAQ,EAAE,eAAe,EAAC;QACnD,gBAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE;KAClD,EACD,mCAAgB,EAAE,CAAC,QAAQ,CAAC,CAAC;IACjC,+DAA+D;IAC/D,wDAAwD;IACxD,mBAAmB;IACnB,MAAM,CAAC,sBAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAc,CAAC,CAAC,CAAC;AACzD,CAAC;AAde,yBAAiB,oBAchC,CAAA;AAED;;GAEG;AACH,IAAM,6BAA6B,GAA2C;IAC5E,6BAAkB,EAAE;QAClB,OAAO,EAAE,yBAAc;QACvB,UAAU,EAAE,UAAC,kBAAyB,EAAE,aAAoB;YAC1D,MAAM,CAAC,IAAI,yBAAc,CAAC,EAAC,oBAAA,kBAAkB,EAAE,eAAA,aAAa,EAAC,CAAC,CAAC;QACjE,CAAC;QACD,IAAI,EAAE,CAAC,0BAAmB,EAAE,qBAAc,CAAC;KAC5C;IACD,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,kBAAO,EAAC;IACjC,EAAC,OAAO,EAAE,0BAAmB,EAAE,QAAQ,EAAE,0BAAiB,EAAE,KAAK,EAAE,IAAI,EAAC;IACxE,EAAC,OAAO,EAAE,qBAAc,EAAE,QAAQ,EAAE,qBAAY,EAAE,KAAK,EAAE,IAAI,EAAC;CAC/D,CAAC;AAGF;;GAEG;AACH,4BACI,gBAAsB,EACtB,eAAwD;IAC1D,IAAI,WAAW,GAAG,yBAAkB,CAAC,gBAAgB,CACjD;QACE,mDAAgC,EAAE,6BAA6B;QAC/D,gBAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE;KAClD,EACD,oCAAiB,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,MAAM,CAAC,2BAAoB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;AAC7D,CAAC;AAVe,0BAAkB,qBAUjC,CAAA;AAED,wBAAwB,GAAU;IAChC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;AACxB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMMON_DIRECTIVES, COMMON_PIPES} from '@angular/common';\nimport {COMPILER_PROVIDERS, CompilerConfig, XHR, RUNTIME_COMPILER_FACTORY,} from '@angular/compiler';\nimport {AppModule, AppModuleRef, ApplicationRef, Compiler, ComponentRef, ComponentResolver, ExceptionHandler, PLATFORM_DIRECTIVES, PLATFORM_PIPES, ReflectiveInjector, Type, coreLoadAndBootstrap, bootstrapModule, bootstrapModuleFactory, isDevMode, OpaqueToken, PlatformRef, getPlatform, assertPlatform, createPlatform, PLATFORM_INITIALIZER, CompilerOptions, CompilerFactory, createPlatformFactory} from '@angular/core';\nimport {BROWSER_APP_PROVIDERS, BrowserModule, WORKER_APP_APPLICATION_PROVIDERS, WORKER_SCRIPT, WORKER_UI_APPLICATION_PROVIDERS, browserPlatform, workerAppPlatform, workerUiPlatform, BROWSER_PLATFORM_PROVIDERS} from '@angular/platform-browser';\n\nimport {Console, ReflectionCapabilities, reflector} from './core_private';\nimport {getDOM, initDomAdapter} from './platform_browser_private';\nimport {PromiseWrapper} from './src/facade/async';\nimport {ConcreteType, isPresent, stringify} from './src/facade/lang';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {XHRImpl} from './src/xhr/xhr_impl';\n\n/**\n * @experimental\n */\nexport const BROWSER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n/**\n * @experimental\n */\nexport const CACHED_TEMPLATE_PROVIDER: Array<any /*Type | Provider | any[]*/> =\n    [{provide: XHR, useClass: CachedXHR}];\n\nfunction initReflector() {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n}\n\n/**\n * CompilerFactory for the browser dynamic platform\n *\n * @experimental\n */\nexport const BROWSER_DYNAMIC_COMPILER_FACTORY =\n    RUNTIME_COMPILER_FACTORY.withDefaults({providers: [{provide: XHR, useClass: XHRImpl}]});\n\n/**\n * Providers for the browser dynamic platform\n *\n * @experimental\n */\nexport const BROWSER_DYNAMIC_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  BROWSER_PLATFORM_PROVIDERS,\n  {provide: CompilerFactory, useValue: BROWSER_DYNAMIC_COMPILER_FACTORY},\n  {provide: PLATFORM_INITIALIZER, useValue: initReflector, multi: true},\n];\n\n/**\n * @experimental API related to bootstrapping are still under review.\n */\nexport const browserDynamicPlatform =\n    createPlatformFactory('browserDynamic', BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API (version 1)\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * ## API (version 2)\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `providers`, `directives`, `pipes`, `modules`, `precompile`: Defines the properties\n *   of the dynamically created module that is used to bootstrap the module.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n *\n * @experimental This api cannot be used with the offline compiler and thus is still subject to\n * change.\n */\n// Note: We are using typescript overloads here to have 2 function signatures!\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<C>>;\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    {providers, directives, pipes, modules, precompile, compilerOptions}?: {\n      providers?: Array<any /*Type | Provider | any[]*/>,\n      directives?: any[],\n      pipes?: any[],\n      modules?: any[],\n      precompile?: any[],\n      compilerOptions?: CompilerOptions\n    }): Promise<ComponentRef<C>>;\nexport function bootstrap<C>(\n    appComponentType: ConcreteType<C>,\n    customProvidersOrDynamicModule?: Array<any /*Type | Provider | any[]*/>| {\n      providers: Array<any /*Type | Provider | any[]*/>,\n      directives: any[],\n      pipes: any[],\n      modules: any[],\n      precompile: any[],\n      compilerOptions: CompilerOptions\n    }): Promise<ComponentRef<C>> {\n  let compilerOptions: CompilerOptions;\n  let compilerProviders: any = [];\n  let providers: any[] = [];\n  let directives: any[] = [];\n  let pipes: any[] = [];\n  let modules: any[] = [];\n  let precompile: any[] = [];\n  if (customProvidersOrDynamicModule instanceof Array) {\n    providers = customProvidersOrDynamicModule;\n  } else if (customProvidersOrDynamicModule) {\n    providers = normalizeArray(customProvidersOrDynamicModule.providers);\n    directives = normalizeArray(customProvidersOrDynamicModule.directives);\n    pipes = normalizeArray(customProvidersOrDynamicModule.pipes);\n    modules = normalizeArray(customProvidersOrDynamicModule.modules);\n    precompile = normalizeArray(customProvidersOrDynamicModule.precompile);\n    compilerOptions = customProvidersOrDynamicModule.compilerOptions;\n  }\n  class DynamicModule {\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: AppModule, args: [{\n    providers: providers,\n    modules: modules.concat([BrowserModule]),\n    directives: directives,\n    pipes: pipes,\n    precompile: precompile.concat([appComponentType])\n  }, ] },\n];\n}\n\n  return bootstrapModule(\n             DynamicModule, browserDynamicPlatform(),\n             CompilerFactory.mergeOptions(compilerOptions, {deprecatedAppProviders: providers}))\n      .then((moduleRef) => {\n        const appRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n        return appRef.bootstrap(appComponentType);\n      });\n}\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_UI_APPLICATION_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS,\n        {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerUiPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\n/**\n * @experimental\n */\nconst WORKER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerApp(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  var appInjector = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_APP_APPLICATION_PROVIDERS, WORKER_APP_COMPILER_PROVIDERS,\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerAppPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\nfunction normalizeArray(arr: any[]): any[] {\n  return arr ? arr : [];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}