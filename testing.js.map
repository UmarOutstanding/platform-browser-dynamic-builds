{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../modules/@angular/platform-browser-dynamic/testing.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;AAEH,yBAA8D,mBAAmB,CAAC,CAAA;AAClF,wBAAsF,2BAA2B,CAAC,CAAA;AAClH,qBAAsE,eAAe,CAAC,CAAA;AACtF,wBAA0D,uBAAuB,CAAC,CAAA;AAClF,wBAAqD,mCAAmC,CAAC,CAAA;AAEzF,sBAA6C,SAAS,CAAC,CAAA;AACvD,4CAAuC,uCAAuC,CAAC,CAAA;AAE/E,iBAAc,0BAEd,CAAC,EAFuC;AAExC,IAAM,uCAAuC,GAA2C;IACtF,sCAA8B;IAC9B;QACE,EAAE,OAAO,EAAE,4BAAiB;YAC1B,QAAQ,EAAE,+BAAqB,EAAE;QACnC,EAAE,OAAO,EAAE,uBAAY;YACrB,QAAQ,EAAE,0BAAgB,EAAE;KAC/B;CACF,CAAC;AAEF;;;;GAIG;AACH,6BACI,EACwD;QADxD,4BACwD,EADvD,iBAAc,EAAd,mCAAc,EAAE,cAAa,EAAb,kCAAa;IAEhC,IAAM,QAAQ,GAAG,yBAAkB,CAAC,gBAAgB,CAAC;QACnD,uCAAuC;QACvC,EAAC,OAAO,EAAE,yBAAc,EAAE,QAAQ,EAAE,IAAI,yBAAc,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,EAAC;QAC7F,SAAS,GAAG,SAAS,GAAG,EAAE;KAC3B,CAAC,CAAC;IACH,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAQ,CAAC,CAAC;AAChC,CAAC;AATe,2BAAmB,sBASlC,CAAA;AAED;;;;GAIG;AACU,kCAA0B,GAAG,6BAAmB,CAAC;AAC9D;IAAA;IAWA,CAAC;IAVD,kBAAkB;IACX,mCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,OAAO,EAAE,CAAC,2BAAiB,CAAC;oBAC5B,SAAS,EAAE;wBACT,EAAC,OAAO,EAAE,8BAAoB,EAAE,QAAQ,EAAE,wCAA8B,EAAC;wBACzE,EAAC,OAAO,EAAE,+BAAqB,EAAE,QAAQ,EAAE,sDAAwB,EAAC;qBACrE;iBACF,EAAG,EAAE;KACL,CAAC;IACF,+BAAC;AAAD,CAAC,AAXD,IAWC;AAXY,gCAAwB,2BAWpC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig, DirectiveResolver, ViewResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockViewResolver, OverridingTestComponentBuilder} from '@angular/compiler/testing';\nimport {AppModule, Compiler, Provider, ReflectiveInjector, Type} from '@angular/core';\nimport {TestComponentBuilder, TestComponentRenderer} from '@angular/core/testing';\nimport {BrowserTestModule, browserTestPlatform} from '@angular/platform-browser/testing';\n\nimport {BROWSER_APP_COMPILER_PROVIDERS} from './index';\nimport {DOMTestComponentRenderer} from './testing/dom_test_component_renderer';\n\nexport * from './private_export_testing'\n\nconst TEST_BROWSER_DYNAMIC_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  BROWSER_APP_COMPILER_PROVIDERS,\n  [\n    { provide: DirectiveResolver,\n      useClass: MockDirectiveResolver },\n    { provide: ViewResolver,\n      useClass: MockViewResolver }\n  ]\n];\n\n/**\n * Creates a compiler for testing\n *\n * @stable\n */\nexport function browserTestCompiler(\n    {providers = [], useJit = true}: {providers?: Array<Type|Provider|any[]>,\n                                      useJit?: boolean} = {}): Compiler {\n  const injector = ReflectiveInjector.resolveAndCreate([\n    TEST_BROWSER_DYNAMIC_COMPILER_PROVIDERS,\n    {provide: CompilerConfig, useValue: new CompilerConfig({genDebugInfo: true, useJit: useJit})},\n    providers ? providers : []\n  ]);\n  return injector.get(Compiler);\n}\n\n/**\n * Platform for testing.\n *\n * @experimental API related to bootstrapping are still under review.\n */\nexport const browserDynamicTestPlatform = browserTestPlatform;\nexport class BrowserDynamicTestModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: AppModule, args: [{\n  modules: [BrowserTestModule],\n  providers: [\n    {provide: TestComponentBuilder, useClass: OverridingTestComponentBuilder},\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n}, ] },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}